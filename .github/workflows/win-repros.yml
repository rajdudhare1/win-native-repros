name: win-repros
on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        repro:
          - { name: zlib-msvc,    crate: repro-zlib,     toolchain: msvc }
          - { name: kafka-msvc,   crate: repro-kafka,    toolchain: msvc }
          - { name: jemalloc-gnu, crate: repro-jemalloc, toolchain: gnu }

    steps:
      - uses: actions/checkout@v4

      # Install Rust host toolchain (MSVC) and also GNU target for jemalloc repro
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      # ---------- GNU toolchain only when needed ----------
      - name: Setup MSYS2 (only for GNU jobs)
        if: matrix.repro.toolchain == 'gnu'
        run: |
          choco install msys2 -y --no-progress
          C:\tools\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm"
          C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm base-devel \
            mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-ninja mingw-w64-x86_64-nasm \
            mingw-w64-x86_64-pkg-config autoconf automake libtool"
          echo "C:\tools\msys64\mingw64\bin" >> $env:GITHUB_PATH

      # ---------- MSVC build (host toolchain, non-Kafka) ----------
      - name: Build ${{ matrix.repro.name }} (MSVC)
        if: matrix.repro.toolchain == 'msvc' && matrix.repro.crate != 'repro-kafka'
        env:
          RUST_BACKTRACE: "1"
        run: |
          cargo build -p ${{ matrix.repro.crate }} -vv

      # ---------- GNU build (cross with --target) ----------
      - name: Build ${{ matrix.repro.name }} (GNU)
        if: matrix.repro.toolchain == 'gnu'
        env:
          RUST_BACKTRACE: "1"
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
          AR: x86_64-w64-mingw32-ar
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
        run: |
          rustup target add x86_64-pc-windows-gnu
          cargo build -p ${{ matrix.repro.crate }} --target x86_64-pc-windows-gnu -vv

      # ---------- Kafka MSVC build ----------
      - name: Install vcpkg deps for Kafka
        if: matrix.repro.crate == 'repro-kafka'
        shell: pwsh
        run: |
            choco install cmake ninja nasm strawberryperl -y --no-progress
            & C:\vcpkg\vcpkg.exe integrate install
            & C:\vcpkg\vcpkg.exe install cyrus-sasl:x64-windows zstd:x64-windows openssl:x64-windows
            & C:\vcpkg\vcpkg.exe list
            Write-Host "=== SASL libs ==="
            dir "C:\vcpkg\installed\x64-windows\lib\*sasl*.lib"
            Write-Host "=== SASL headers ==="
            dir "C:\vcpkg\installed\x64-windows\include\sasl"
            Write-Host "VCPKG_ROOT=$env:VCPKG_ROOT"

      - name: Build Kafka repro (MSVC)
        if: matrix.repro.crate == 'repro-kafka'
        shell: pwsh
        env:
            OPENSSL_DIR:        C:\vcpkg\installed\x64-windows
            OPENSSL_ROOT_DIR:   C:\vcpkg\installed\x64-windows
            OPENSSL_LIB_DIR:    C:\vcpkg\installed\x64-windows\lib
            OPENSSL_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
            RUST_BACKTRACE: "1"
            CMAKE_TOOLCHAIN_FILE: C:\vcpkg\scripts\buildsystems\vcpkg.cmake
            VCPKG_ROOT: C:\vcpkg
            VCPKG_DEFAULT_TRIPLET: x64-windows
            VCPKG_TARGET_TRIPLET:  x64-windows
            SASL2_DIR:        C:\vcpkg\installed\x64-windows
            SASL2_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
            SASL2_LIB_DIR:    C:\vcpkg\installed\x64-windows\lib
            ZSTD_DIR:         C:\vcpkg\installed\x64-windows
            ZSTD_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
            ZSTD_LIB_DIR:     C:\vcpkg\installed\x64-windows\lib
            OPENSSL_NO_VENDOR: ""   # let openssl-sys build its own
        run: |
            cargo build -p repro-kafka -vv

      # ---------- Artifacts (optional; helps inspect outputs) ----------
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repro.name }}
          path: |
            target\**\${{ matrix.repro.crate }}*.exe
            target\**\*.dll
            target\**\*.pyd
          if-no-files-found: warn